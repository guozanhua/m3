// Code generated by MockGen. DO NOT EDIT.
// Source: ./cost_accounting.go

// Package common is a generated GoMock package.
package common

import (
	cost "code.uber.internal/infra/statsdex/cost"
	gomock "github.com/golang/mock/gomock"
	tally "github.com/uber-go/tally"
	reflect "reflect"
)

// __mockCostAccounting is a mock of CostAccounting interface
type __mockCostAccounting struct {
	ctrl     *gomock.Controller
	recorder *__mockCostAccountingMockRecorder
}

// __mockCostAccountingMockRecorder is the mock recorder for __mockCostAccounting
type __mockCostAccountingMockRecorder struct {
	mock *__mockCostAccounting
}

// New__mockCostAccounting creates a new mock instance
func New__mockCostAccounting(ctrl *gomock.Controller) *__mockCostAccounting {
	mock := &__mockCostAccounting{ctrl: ctrl}
	mock.recorder = &__mockCostAccountingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *__mockCostAccounting) EXPECT() *__mockCostAccountingMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *__mockCostAccounting) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *__mockCostAccountingMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*__mockCostAccounting)(nil).Close))
}

// Charge mocks base method
func (m *__mockCostAccounting) Charge(tags map[string]string, datapoints, series int64) {
	m.ctrl.Call(m, "Charge", tags, datapoints, series)
}

// Charge indicates an expected call of Charge
func (mr *__mockCostAccountingMockRecorder) Charge(tags, datapoints, series interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charge", reflect.TypeOf((*__mockCostAccounting)(nil).Charge), tags, datapoints, series)
}

// ChargeError mocks base method
func (m *__mockCostAccounting) ChargeError(tags map[string]string) {
	m.ctrl.Call(m, "ChargeError", tags)
}

// ChargeError indicates an expected call of ChargeError
func (mr *__mockCostAccountingMockRecorder) ChargeError(tags interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeError", reflect.TypeOf((*__mockCostAccounting)(nil).ChargeError), tags)
}

// ConfigureRegistryReporting mocks base method
func (m *__mockCostAccounting) ConfigureRegistryReporting(r cost.Registry, ownershipTags map[string]string) cost.Registry {
	ret := m.ctrl.Call(m, "ConfigureRegistryReporting", r, ownershipTags)
	ret0, _ := ret[0].(cost.Registry)
	return ret0
}

// ConfigureRegistryReporting indicates an expected call of ConfigureRegistryReporting
func (mr *__mockCostAccountingMockRecorder) ConfigureRegistryReporting(r, ownershipTags interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureRegistryReporting", reflect.TypeOf((*__mockCostAccounting)(nil).ConfigureRegistryReporting), r, ownershipTags)
}

// MockcachedCountReporter is a mock of cachedCountReporter interface
type MockcachedCountReporter struct {
	ctrl     *gomock.Controller
	recorder *MockcachedCountReporterMockRecorder
}

// MockcachedCountReporterMockRecorder is the mock recorder for MockcachedCountReporter
type MockcachedCountReporterMockRecorder struct {
	mock *MockcachedCountReporter
}

// NewMockcachedCountReporter creates a new mock instance
func NewMockcachedCountReporter(ctrl *gomock.Controller) *MockcachedCountReporter {
	mock := &MockcachedCountReporter{ctrl: ctrl}
	mock.recorder = &MockcachedCountReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcachedCountReporter) EXPECT() *MockcachedCountReporterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockcachedCountReporter) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockcachedCountReporterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockcachedCountReporter)(nil).Close))
}

// AllocateCounter mocks base method
func (m *MockcachedCountReporter) AllocateCounter(name string, tags map[string]string) tally.CachedCount {
	ret := m.ctrl.Call(m, "AllocateCounter", name, tags)
	ret0, _ := ret[0].(tally.CachedCount)
	return ret0
}

// AllocateCounter indicates an expected call of AllocateCounter
func (mr *MockcachedCountReporterMockRecorder) AllocateCounter(name, tags interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateCounter", reflect.TypeOf((*MockcachedCountReporter)(nil).AllocateCounter), name, tags)
}
