// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber-go/tally (interfaces: CachedCount)

// Package common is a generated GoMock package.
package common

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCachedCount is a mock of CachedCount interface
type MockCachedCount struct {
	ctrl     *gomock.Controller
	recorder *MockCachedCountMockRecorder
}

// MockCachedCountMockRecorder is the mock recorder for MockCachedCount
type MockCachedCountMockRecorder struct {
	mock *MockCachedCount
}

// NewMockCachedCount creates a new mock instance
func NewMockCachedCount(ctrl *gomock.Controller) *MockCachedCount {
	mock := &MockCachedCount{ctrl: ctrl}
	mock.recorder = &MockCachedCountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCachedCount) EXPECT() *MockCachedCountMockRecorder {
	return m.recorder
}

// ReportCount mocks base method
func (m *MockCachedCount) ReportCount(arg0 int64) {
	m.ctrl.Call(m, "ReportCount", arg0)
}

// ReportCount indicates an expected call of ReportCount
func (mr *MockCachedCountMockRecorder) ReportCount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCount", reflect.TypeOf((*MockCachedCount)(nil).ReportCount), arg0)
}
